{"version":3,"sources":["js/store.js","js/components/Score.js","js/components/Mallet.js","js/components/Field.js","js/components/Mole.js","js/components/Planes.js","js/App.js","serviceWorker.js","index.js"],"names":["state","proxy","score","isSwingingForward","isSwingingBackward","api","whac","position","setTimeout","y","Score","useSnapshot","Text","anchorX","anchorY","fontSize","Mallet","useGLTF","nodes","materials","outer","useRef","inner","useFrame","current","rotation","x","THREE","lerp","mouse","Math","PI","z","set","ref","scale","object","Bone","Bone003","Bone006","Bone010","castShadow","receiveShadow","material","glove","material-roughness","geometry","arm","skeleton","wood","hand","Field","props","dispose","Field001","Mole","args","offset","useState","hovered","hover","aboveField","setAboveField","sin","clock","elapsedTime","onClick","useCallback","e","stopPropagation","onPointerOver","onPointerOut","color","Planes","App","shadows","camera","fov","attach","intensity","angle","penumbra","shadow-mapSize","shadow-bias","iterations","tolerance","gravity","Array","from","length","i","idx","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49ccba37.chunk.js","sourcesContent":["import { proxy } from \"valtio\"\n\n/**\n * Our application state.\n * Our \"whac\" function increments the score if the mole is above the field.\n */\nexport const state = proxy({\n  score: 0,\n  isSwingingForward: false,\n  isSwingingBackward: false,\n  api: {\n    whac(position) {\n      state.isSwingingForward = true\n      setTimeout(() => { state.isSwingingForward = false; state.isSwingingBackward = true }, 250)\n      setTimeout(() => state.isSwingingBackward = false, 500)\n      if (position.y > 1.25) {\n        ++state.score\n      }\n    }\n  }\n})","import React from \"react\"\nimport { Text } from \"@react-three/drei\"\nimport { useSnapshot } from \"valtio\"\nimport { state } from \"../store\"\n\n/**\n * The score displays the number of moles you hit this session\n */\nexport default function Score() {\n  const { score } = useSnapshot(state)\n  return (\n    <group>\n      <Text anchorX=\"center\" anchorY=\"middle\" position={[0, 5, -2]} fontSize={.25}>\n        SCORE\n      </Text>\n      <Text anchorX=\"center\" anchorY=\"middle\" position={[0, 4, -2]} fontSize={2}>\n        { score }\n      </Text>\n    </group>\n  )\n}","import * as THREE from \"three\"\nimport React, { useRef } from \"react\"\nimport { useFrame } from \"@react-three/fiber\"\nimport { useGLTF } from \"@react-three/drei\"\nimport { useSnapshot } from \"valtio\"\nimport { state } from \"../store\"\n\n/**\n * The mallet that follows the mouse. When a mole is clicked the mallet swings\n */\nexport default function Mallet() {\n  const { isSwingingForward, isSwingingBackward } = useSnapshot(state)\n  const { nodes, materials } = useGLTF(\"./mallet.glb\")\n  const outer = useRef()\n  const inner = useRef()\n  useFrame((state) => {\n    inner.current.rotation.x = THREE.MathUtils.lerp(inner.current.rotation.x, 0, 0.2)\n    inner.current.rotation.y = THREE.MathUtils.lerp(inner.current.rotation.y, (state.mouse.x * Math.PI) / 10, 0.2)\n    if (isSwingingForward) {\n      outer.current.rotation.x += 0.15\n      outer.current.rotation.y += 0.25\n      outer.current.rotation.z += 0.45\n    } else if (isSwingingBackward) {\n      outer.current.rotation.x -= 0.15\n      outer.current.rotation.y -= 0.25\n      outer.current.rotation.z -= 0.45\n    }\n    else {\n      outer.current.rotation.set(0, 0, inner.current.rotation.y)\n    }\n    outer.current.position.set(state.mouse.x * 10, 2.75, state.mouse.y * (state.mouse.y < 0.25 ? -30 : -5))\n  })\n  return (\n    <group ref={outer}>\n      <group ref={inner} position={[-0.05, 0.35, 0.3]} scale={0.15}>\n        <group rotation={[1.85, -0.35, 2.35]} scale={[2.95, 2.95, 2.95]}>\n          <primitive object={nodes.Bone} />\n          <primitive object={nodes.Bone003} />\n          <primitive object={nodes.Bone006} />\n          <primitive object={nodes.Bone010} />\n          <skinnedMesh castShadow receiveShadow material={materials.glove} material-roughness={1} geometry={nodes.arm.geometry} skeleton={nodes.arm.skeleton} />\n        </group>\n        <group rotation={[0, -0.05, 0]} scale={141.95}>\n          <mesh castShadow receiveShadow material={materials.wood} geometry={nodes.hand.geometry} />\n        </group>\n      </group>\n    </group>\n  )\n}","import React, { useRef } from \"react\"\nimport { useGLTF } from \"@react-three/drei\"\n\n/**\n * The field that the moles sit in. It is generated via .glb file and has no collision\n */\nexport default function Field(props) {\n  const ref = useRef()\n  const { nodes, materials } = useGLTF(\"./field.glb\")\n  return (\n    <mesh ref={ref} dispose={null} receiveShadow material={materials.Field} geometry={nodes.Field001.geometry} scale={[5, 1.5, 5]} position={[0,0,1]}/>\n  )\n}","import React, { useState, useRef, useCallback } from \"react\"\nimport { useFrame } from \"@react-three/fiber\"\nimport { Cylinder } from \"@react-three/drei\"\nimport { state } from \"../store\"\n\n/**\n * Moles appear red when hovered on and above the field surface\n * They animate on the y-axis using sin function applying to the applications elapsed time\n */\nexport default function Mole({ args = [1, 1, 0.5, 32], offset = 0, position: [x, y, z], ...props }) {\n  const ref = useRef()\n  const [hovered, hover] = useState(false)\n  const [aboveField, setAboveField] = useState(false)\n  useFrame((state) => {\n    ref.current.position.set(x, y + Math.sin(offset + state.clock.elapsedTime) * 0.5, z)\n    ref.current.position.y > 1.25 ? setAboveField(true) : setAboveField(false)\n  })\n  const onClick = useCallback((e) => {\n    e.stopPropagation()\n    state.api.whac(ref.current.position)\n  }, [])\n  return (\n    <group ref={ref} onClick={onClick} onPointerOver={() => hover(true)} onPointerOut={() => hover(false)}>\n      <Cylinder args={args} castShadow>\n        <meshStandardMaterial color={hovered && aboveField ? \"redorange\" : \"orange\"}/>\n      </Cylinder>\n    </group>\n  )\n}","import React from \"react\"\n\n/**\n * Creates two planes that form the floor and and background\n */\nexport default function Planes() {\n  return (\n    <group>\n      <mesh position={[0, 0, 0]} rotation={[-Math.PI / 2, 0, 0]}>\n        <planeGeometry args={[1000, 1000]}/>\n        <meshPhongMaterial color=\"hotpink\"/>\n      </mesh>\n      <mesh position={[0, 0, -10]} rotation={[0, 0, Math.PI / 2]}>\n        <planeGeometry args={[1000, 1000]}/>\n        <meshPhongMaterial color=\"hotpink\"/>\n      </mesh>\n    </group>\n  )\n}","import React from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport { Physics } from \"@react-three/cannon\"\n\nimport Score from \"./components/Score\"\nimport Mallet from \"./components/Mallet\"\nimport Field from \"./components/Field\"\nimport Mole from \"./components/Mole\"\nimport Planes from \"./components/Planes\"\n\nexport default function App() {\n  return (\n    <Canvas shadows camera={{ position: [0, 5, 12], fov: 50 }}>\n      <color attach=\"background\" args={[\"#232021\"]} />\n      <ambientLight intensity={0.5} />\n      <pointLight position={[-10, -10, -10]} />\n      <spotLight position={[10, 10, 10]} angle={0.5} penumbra={1} intensity={1} castShadow shadow-mapSize={[2048, 2048]} shadow-bias={-0.0001} />\n      <Physics iterations={6} tolerance={0.0001} gravity={[0, -40, 0]}>\n        <Planes/>\n        <Field/>\n        {Array.from({ length: 3 }, (i, idx) => (\n          <Mole key={idx} position={[-2.8 + idx * 2.8, 1, -2]} offset={10000 * idx} />\n        ))}\n        {Array.from({ length: 3 }, (i, idx) => (\n          <Mole key={idx} position={[-2.8 + idx * 2.8, 1, 1]} offset={10000 * idx + 1} />\n        ))}\n        {Array.from({ length: 3 }, (i, idx) => (\n          <Mole key={idx} position={[-2.8 + idx * 2.8, 1, 4]} offset={10000 * idx + 2} />\n        ))}\n        <Mallet/>\n        <Score/>\n      </Physics>\n    </Canvas>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/styles.scss';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst render = () => {\n\tReactDOM.render(\n\t\t<App/>,\n\t\tdocument.getElementById('root')\n\t)\n}\n\nrender()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n//reportWebVitals();\n\n"],"sourceRoot":""}
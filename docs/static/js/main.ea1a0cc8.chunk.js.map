{"version":3,"sources":["js/App.js","serviceWorker.js","index.js"],"names":["state","proxy","count","isSwinging","api","whac","position","setTimeout","y","Score","useSnapshot","Text","anchorX","anchorY","fontSize","Mallet","model","useRef","useGLTF","nodes","materials","useBox","type","args","ref","useFrame","current","rotation","x","THREE","lerp","mouse","Math","PI","set","scale","object","Bone","Bone003","Bone006","Bone010","castShadow","receiveShadow","material","glove","material-roughness","geometry","arm","skeleton","wood","hand","Field","props","dispose","Field001","Mole","offset","z","useState","hovered","hover","sin","clock","elapsedTime","onClick","useCallback","e","stopPropagation","onPointerOver","onPointerOut","color","Planes","App","shadows","camera","fov","attach","intensity","angle","penumbra","shadow-mapSize","shadow-bias","iterations","tolerance","gravity","Array","from","length","i","idx","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea1a0cc8.chunk.js","sourcesContent":["import * as THREE from \"three\"\nimport React, { useState, useRef, useCallback } from \"react\"\nimport { Canvas, useFrame } from \"@react-three/fiber\"\nimport { Text, Cylinder, useGLTF } from \"@react-three/drei\"\nimport { Physics, useBox } from \"@react-three/cannon\"\nimport { proxy, useSnapshot } from \"valtio\"\n\nconst state = proxy({\n  count: 0,\n  isSwinging: false,\n  api: {\n    whac(position) {\n      state.isSwinging = true\n      setTimeout(() => state.isSwinging = false, 400)\n      if (position.y > 1.25) {\n        ++state.count\n      }\n    }\n  }\n})\n\n/**\n * The score keeps track of the number of moles you have whac'd this session\n */\nfunction Score() {\n  const { count } = useSnapshot(state)\n  return (\n    <Text anchorX=\"center\" anchorY=\"middle\" position={[0, 4, -2]} fontSize={2}>\n      {count}\n    </Text>\n  )\n}\n\n/**\n * The mallet that follows the mouse. When a mole is clicked the mallet swings\n */\nfunction Mallet() {\n  const { isSwinging } = useSnapshot(state)\n  const model = useRef()\n  const { nodes, materials } = useGLTF(\"/mallet.glb\")\n  const [ref, api] = useBox(() => ({\n    type: \"Kinematic\",\n    args: [3.4, 1, 3.5]\n  }))\n  useFrame((state) => {\n    model.current.rotation.x = THREE.MathUtils.lerp(model.current.rotation.x, 0, 0.2)\n    model.current.rotation.y = THREE.MathUtils.lerp(model.current.rotation.y, (state.mouse.x * Math.PI) / 10, 0.2)\n    if (isSwinging) {\n      api.rotation.set(0.15, 0.75, 1.5)\n    } else {\n      api.rotation.set(0, 0, model.current.rotation.y)\n    }\n    api.position.set(state.mouse.x * 10, 2.75, state.mouse.y * (state.mouse.y < 0 ? -30 : -5))\n  })\n  return (\n    <group ref={ref}>\n      <group ref={model} position={[-0.05, 0.35, 0.3]} scale={0.15}>\n        <group rotation={[1.85, -0.35, 2.35]} scale={[2.95, 2.95, 2.95]}>\n          <primitive object={nodes.Bone} />\n          <primitive object={nodes.Bone003} />\n          <primitive object={nodes.Bone006} />\n          <primitive object={nodes.Bone010} />\n          <skinnedMesh castShadow receiveShadow material={materials.glove} material-roughness={1} geometry={nodes.arm.geometry} skeleton={nodes.arm.skeleton} />\n        </group>\n        <group rotation={[0, -0.05, 0]} scale={141.95}>\n          <mesh castShadow receiveShadow material={materials.wood} geometry={nodes.hand.geometry} />\n        </group>\n      </group>\n    </group>\n  )\n}\n\n/**\n * The field that sits under the moles. It is generated via GLB and has no collision\n */\nfunction Field(props) {\n  const ref = useRef()\n  const { nodes, materials } = useGLTF(\"/field.glb\")\n  return (\n    <mesh ref={ref} dispose={null} receiveShadow material={materials.Field} geometry={nodes.Field001.geometry} scale={[5, 1.5, 5]} position={[0,0,1]}/>\n  )\n}\n\n/**\n * Moles appear red when hovered and animate using a sin function\n */\nfunction Mole({ args = [1, 1, 0.5, 32], offset = 0, position: [x, y, z], ...props }) {\n  const ref = useRef()\n  const [hovered, hover] = useState(false)\n  useFrame((state) => ref.current.position.set(\n    x,\n    y + Math.sin(offset + state.clock.elapsedTime) * 0.5,\n    z\n  ))\n  const onClick = useCallback((e) => {\n    e.stopPropagation()\n    state.api.whac(ref.current.position)\n  }, [])\n  return (\n    <group ref={ref} onClick={onClick} onPointerOver={() => hover(true)} onPointerOut={() => hover(false)}>\n      <Cylinder args={args} castShadow>\n        <meshStandardMaterial color={hovered ? \"redorange\" : \"orange\"}/>\n      </Cylinder>\n    </group>\n  )\n}\n\n/**\n * Creates two planes that form the floor and and background\n */\nfunction Planes() {\n  return (\n    <group>\n      <mesh position={[0, 0, 0]} rotation={[-Math.PI / 2, 0, 0]}>\n        <planeGeometry args={[1000, 1000]}/>\n        <meshPhongMaterial color=\"hotpink\"/>\n      </mesh>\n      <mesh position={[0, 0, -10]} rotation={[0, 0, Math.PI / 2]}>\n        <planeGeometry args={[1000, 1000]}/>\n        <meshPhongMaterial color=\"hotpink\"/>\n      </mesh>\n    </group>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas shadows camera={{ position: [0, 5, 12], fov: 50 }}>\n      <color attach=\"background\" args={[\"#232021\"]} />\n      <ambientLight intensity={0.5} />\n      <pointLight position={[-10, -10, -10]} />\n      <spotLight position={[10, 10, 10]} angle={0.5} penumbra={1} intensity={1} castShadow shadow-mapSize={[2048, 2048]} shadow-bias={-0.0001} />\n      <Physics iterations={6} tolerance={0.0001} gravity={[0, -40, 0]}>\n        <Planes/>\n        <Field/>\n        {Array.from({ length: 3 }, (i, idx) => (\n          <Mole key={idx} position={[-2.8 + idx * 2.8, 1, -2]} offset={10000 * idx} />\n        ))}\n        {Array.from({ length: 3 }, (i, idx) => (\n          <Mole key={idx} position={[-2.8 + idx * 2.8, 1, 1]} offset={10000 * idx + 1} />\n        ))}\n        {Array.from({ length: 3 }, (i, idx) => (\n          <Mole key={idx} position={[-2.8 + idx * 2.8, 1, 4]} offset={10000 * idx + 2} />\n        ))}\n        <Mallet/>\n      </Physics>\n\t\t\t<Score/>\n    </Canvas>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/styles.scss';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst render = () => {\n\tReactDOM.render(\n\t\t<App/>,\n\t\tdocument.getElementById('root')\n\t)\n}\n\nrender()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n//reportWebVitals();\n\n"],"sourceRoot":""}